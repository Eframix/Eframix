{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { IncomingMessage, ServerResponse } from \"http\";\nimport * as http from 'http';\n\ntype Handler = (req: IncomingMessage, res: ServerResponse, next: () => void) => void;\n\nexport interface Endpoint {\n    url: string;\n    handlers: Array<Handler>;\n}\n\ndeclare module 'http' {\n    interface IncomingMessage {\n        params: { [key: string]: string };\n        body: { [key: string]: any };\n    }\n}\n\nexport interface Route {\n    method: string;\n    url: string;\n    handler: Router | Array<Handler>;\n}\n\nconst MATCH_ALL_METHOD = \".*\";\nconst ROOT = '/';\n\nclass Router {\n    private routes: Route[];\n    private server: http.Server;\n\n    constructor() {\n        this.routes = [];\n        this.server = http.createServer(async (req: IncomingMessage, res: ServerResponse) => {\n            req.params = {};\n            this.handleRequest(req, res);\n        });\n    }\n\n    startServer(port: number, cp?: () => void) {\n        this.server.listen(port, cp);\n    }\n\n    /**\n     * \n     * @param url: string\n     * @param handler: Handler | Router\n     */\n    use(url: string, handler: Handler): void;\n    use(handler: Handler): void;\n    use(router: Router): void;\n    use(url: string, router: Router): void;\n    use(arg1: string | Handler | Router, arg2?: Handler | Router): void {\n        if (typeof arg1 === 'string' && arg2) {\n            if (arg2 instanceof Router) {\n                this.set(MATCH_ALL_METHOD, arg1, arg2);\n            }\n            else {\n                this.set(MATCH_ALL_METHOD, arg1, [arg2]);\n            }\n        } else if (arg1 instanceof Router) {\n            this.set(MATCH_ALL_METHOD, ROOT, arg1);\n        } else if (typeof arg1 === 'function') {\n            this.set(MATCH_ALL_METHOD, ROOT, [arg1]);\n        }\n    }\n\n    private set(method: string, url: string, handlers: Router | Array<Handler>): void {\n        if (url.at(-1) === ROOT) url = url.slice(0, -1);\n        this.routes.push({ method, url, handler: handlers });\n    }\n\n    get(url: string, ...handlers: Array<Handler>): void {\n        this.set(\"GET\", url, handlers);\n    }\n\n    post(url: string, ...handlers: Array<Handler>): void {\n        this.set(\"POST\", url, handlers);\n    }\n\n    put(url: string, ...handlers: Array<Handler>): void {\n        this.set(\"PUT\", url, handlers);\n    }\n\n    delete(url: string, ...handlers: Array<Handler>): void {\n        this.set(\"DELETE\", url, handlers);\n    }\n\n    private async runHandlers(handlers: Array<Handler>, req: IncomingMessage, res: ServerResponse) {\n        let index = 0;\n        const next = async () => {\n            if (index < handlers.length) {\n                const handler = handlers[index++];\n                await handler(req, res, next);\n            }\n        };\n        await next();\n    }\n\n    private matchPrefix(routeUrl: string, req: IncomingMessage): boolean {\n        const routeUrlPath = routeUrl.split(\"/\");\n        const reqUrlPath = req.url?.split(\"/\") || [];\n\n        if (routeUrlPath.length > reqUrlPath.length) return false;\n\n        for (let i = 0; i < routeUrlPath.length; i++) {\n            if (routeUrlPath[i][0] === ':') {\n                req.params[routeUrlPath[i].slice(1)] = reqUrlPath[i];\n                continue;\n            }\n            if (routeUrlPath[i] !== reqUrlPath[i]) return false;\n        }\n        return true;\n    }\n\n    private async handleRequest(req: IncomingMessage, res: ServerResponse) {\n        this.routes.forEach(async (route) => {\n            if (RegExp(route.method).test(req.method ?? \"GET\") && this.matchPrefix(route.url, req)) {\n                if (route.handler instanceof Router) {\n                    req.url = req.url?.slice(route.url.length) || ROOT;\n                    await route.handler.handleRequest(req, res);\n                }\n                else {\n                    await this.runHandlers(route.handler, req, res);\n                }\n            }\n        });\n    }\n}\n\nexport default Router;\nexport {Handler, IncomingMessage}"],"mappings":"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","names":[]}
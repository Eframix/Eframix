{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { IncomingMessage, ServerResponse } from \"http\";\nimport * as http from 'http';\n\ntype Handler = (req: IncomingMessage, res: ServerResponse, next: () => void) => void;\n\nexport interface Endpoint {\n    url: string;\n    handlers: Array<Handler>;\n}\n\ndeclare module 'http' {\n    interface IncomingMessage {\n        params: { [key: string]: string };\n        body: any;\n    }\n}\n\nexport interface Route {\n    method: string;\n    url: string;\n    handler: Router | Array<Handler>;\n}\n\nconst MATCH_ALL_METHOD = \".*\";\nconst ROOT = '/';\n\nclass Router {\n    private routes: Route[];\n    private server: http.Server;\n    private globalMiddlewares: Handler[];\n\n    constructor() {\n        this.routes = [];\n        this.globalMiddlewares = [];\n        this.server = http.createServer(async (req: IncomingMessage, res: ServerResponse) => {\n            req.params = {};\n            await this.handleRequest(req, res);\n        });\n    }\n\n    public bodyParser: Handler = (req: IncomingMessage, res: ServerResponse, next: () => void) => {\n        let body = '';\n\n        req.on('data', chunk => {\n            body += chunk.toString();\n        });\n\n        req.on('end', () => {\n            if (body) {\n                try {\n                    req.body = JSON.parse(body);\n                    console.log(\"Parsed Body:\", req.body);\n                } catch (error) {\n                    console.warn(\"Invalid JSON, proceeding with empty body\");\n                    req.body = {};\n                }\n            } else {\n                req.body = {};\n            }\n            next();\n        });\n\n        req.on('error', () => {\n            res.writeHead(400, { \"Content-Type\": \"application/json\" });\n            res.end(JSON.stringify({ title: \"Bad Request\", message: \"Error processing body\" }));\n        });\n    };\n\n    startServer(port: number, cp?: () => void) {\n        this.server.listen(port, cp);\n    }\n\n    use(handler: Handler): void;\n    use(url: string, handler: Handler): void;\n    use(router: Router): void;\n    use(url: string, router: Router): void;\n    use(arg1: string | Handler | Router, arg2?: Handler | Router): void {\n        if (typeof arg1 === 'string' && arg2) {\n            if (arg2 instanceof Router) {\n                this.set(MATCH_ALL_METHOD, arg1, arg2);\n            } else {\n                this.globalMiddlewares.push(arg2);\n                this.set(MATCH_ALL_METHOD, arg1, [arg2]);\n            }\n        } else if (arg1 instanceof Router) {\n            this.set(MATCH_ALL_METHOD, ROOT, arg1);\n        } else if (typeof arg1 === 'function') {\n            this.globalMiddlewares.push(arg1);\n            this.set(MATCH_ALL_METHOD, ROOT, [arg1]);\n        }\n    }\n\n    private set(method: string, url: string, handlers: Router | Array<Handler>): void {\n        if (url.at(-1) === ROOT) url = url.slice(0, -1);\n        this.routes.push({ method, url, handler: handlers });\n    }\n\n    get(url: string, ...handlers: Array<Handler>): void {\n        this.set(\"GET\", url, handlers);\n    }\n\n    post(url: string, ...handlers: Array<Handler>): void {\n        this.set(\"POST\", url, handlers);\n    }\n\n    put(url: string, ...handlers: Array<Handler>): void {\n        this.set(\"PUT\", url, handlers);\n    }\n\n    delete(url: string, ...handlers: Array<Handler>): void {\n        this.set(\"DELETE\", url, handlers);\n    }\n\n    patch(url: string, ...handlers: Array<Handler>): void {\n        this.set(\"PATCH\", url, handlers);\n    }\n\n    private async runHandlers(handlers: Array<Handler>, req: IncomingMessage, res: ServerResponse) {\n        let index = 0;\n        const next = async () => {\n            if (index < handlers.length) {\n                if (res.writableEnded) return;\n                const handler = handlers[index++];\n                try {\n                    await handler(req, res, next);\n                } catch (error) {\n                    console.error(\"Error in handler:\", error);\n                    res.writeHead(500, { 'Content-Type': 'text/plain' });\n                    res.end('Internal Server Error');\n                }\n            } else {\n               \n                if (!res.writableEnded) {\n                    res.writeHead(404, { 'Content-Type': 'text/plain' });\n                    res.end('Not Found');\n                }\n            }\n        };\n        await next();\n    }\n\n    private async handleRequest(req: IncomingMessage, res: ServerResponse) {\n        const methodHandlers: Array<Handler> = [];\n\n        for (const route of this.routes) {\n            if (RegExp(route.method).test(req.method ?? \"GET\")) {\n                if (this.matchUrl(route.url, req)) {\n                    if (!(route.handler instanceof Router)) {\n                        methodHandlers.push(...this.globalMiddlewares, ...route.handler as Array<Handler>);\n                    } else {\n                        req.url = req.url?.slice(route.url.length) || ROOT;\n                        await route.handler.handleRequest(req, res);\n                    }\n                }\n            }\n        }\n\n        if (methodHandlers.length > 0) {\n            await this.runHandlers(methodHandlers, req, res);\n        } else {\n            if (!res.writableEnded) {\n                res.writeHead(404, { 'Content-Type': 'text/plain' });\n                res.end('Not Found');\n            }\n        }\n    }\n\n    private matchUrl(url: string, req: IncomingMessage): boolean {\n        const urlPath = url.split(\"/\");\n        const reqUrlPath = req.url?.split(\"/\") || [];\n\n        if (urlPath.length !== reqUrlPath.length) return false;\n\n        for (let i = 0; i < urlPath.length; i++) {\n            if (urlPath[i][0] === ':') {\n                req.params[urlPath[i].slice(1)] = reqUrlPath[i];\n                continue;\n            }\n            if (urlPath[i] !== reqUrlPath[i]) return false;\n        }\n        return true;\n    }\n}\n\nexport default Router;\nexport { Handler, IncomingMessage }\n"],"mappings":"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","names":[]}